use super::sqltypes::*;

// automatically generated by rust-bindgen

#[repr(C)]
#[derive(Copy)]
pub struct Struct_tagODBC_VS_ARGS {
    pub pguidEvent: *const ::std::os::raw::c_void,
    pub dwFlags: DWORD,
    pub u1: Union_Unnamed3,
    pub u2: Union_Unnamed4,
    pub RetCode: RETCODE,
}
impl ::std::clone::Clone for Struct_tagODBC_VS_ARGS {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_tagODBC_VS_ARGS {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed3 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed3 {
    pub unsafe fn wszArg(&mut self) -> *mut *mut WCHAR {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn szArg(&mut self) -> *mut *mut CHAR {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed3 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Union_Unnamed3 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed4 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed4 {
    pub unsafe fn wszCorrelation(&mut self) -> *mut *mut WCHAR {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn szCorrelation(&mut self) -> *mut *mut CHAR {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed4 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Union_Unnamed4 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type ODBC_VS_ARGS = Struct_tagODBC_VS_ARGS;
pub type PODBC_VS_ARGS = *mut Struct_tagODBC_VS_ARGS;

#[cfg_attr(windows, link(name="odbc32"))]
#[cfg_attr(not(windows), link(name="odbc"))]
extern "C" {
    pub fn SQLAllocConnect(EnvironmentHandle: SQLHENV,
                           ConnectionHandle: *mut SQLHDBC)
                           -> SQLRETURN;
    pub fn SQLAllocEnv(EnvironmentHandle: *mut SQLHENV) -> SQLRETURN;
    pub fn SQLAllocHandle(HandleType: SQLSMALLINT,
                          InputHandle: SQLHANDLE,
                          OutputHandle: *mut SQLHANDLE)
                          -> SQLRETURN;
    pub fn SQLAllocStmt(ConnectionHandle: SQLHDBC, StatementHandle: *mut SQLHSTMT) -> SQLRETURN;
    pub fn SQLBindCol(StatementHandle: SQLHSTMT,
                      ColumnNumber: SQLUSMALLINT,
                      TargetType: SQLSMALLINT,
                      TargetValue: SQLPOINTER,
                      BufferLength: SQLLEN,
                      StrLen_or_Ind: *mut SQLLEN)
                      -> SQLRETURN;
    pub fn SQLBindParam(StatementHandle: SQLHSTMT,
                        ParameterNumber: SQLUSMALLINT,
                        ValueType: SQLSMALLINT,
                        ParameterType: SQLSMALLINT,
                        LengthPrecision: SQLULEN,
                        ParameterScale: SQLSMALLINT,
                        ParameterValue: SQLPOINTER,
                        StrLen_or_Ind: *mut SQLLEN)
                        -> SQLRETURN;
    pub fn SQLCancel(StatementHandle: SQLHSTMT) -> SQLRETURN;
    pub fn SQLCloseCursor(StatementHandle: SQLHSTMT) -> SQLRETURN;
    pub fn SQLColAttribute(StatementHandle: SQLHSTMT,
                           ColumnNumber: SQLUSMALLINT,
                           FieldIdentifier: SQLUSMALLINT,
                           CharacterAttribute: SQLPOINTER,
                           BufferLength: SQLSMALLINT,
                           StringLength: *mut SQLSMALLINT,
                           NumericAttribute: *mut SQLLEN)
                           -> SQLRETURN;
    pub fn SQLColumns(StatementHandle: SQLHSTMT,
                      CatalogName: *mut SQLCHAR,
                      NameLength1: SQLSMALLINT,
                      SchemaName: *mut SQLCHAR,
                      NameLength2: SQLSMALLINT,
                      TableName: *mut SQLCHAR,
                      NameLength3: SQLSMALLINT,
                      ColumnName: *mut SQLCHAR,
                      NameLength4: SQLSMALLINT)
                      -> SQLRETURN;
    pub fn SQLConnect(ConnectionHandle: SQLHDBC,
                      ServerName: *const SQLCHAR,
                      NameLength1: SQLSMALLINT,
                      UserName: *const SQLCHAR,
                      NameLength2: SQLSMALLINT,
                      Authentication: *const SQLCHAR,
                      NameLength3: SQLSMALLINT)
                      -> SQLRETURN;
    pub fn SQLCopyDesc(SourceDescHandle: SQLHDESC, TargetDescHandle: SQLHDESC) -> SQLRETURN;
    pub fn SQLDataSources(EnvironmentHandle: SQLHENV,
                          Direction: SQLUSMALLINT,
                          ServerName: *mut SQLCHAR,
                          BufferLength1: SQLSMALLINT,
                          NameLength1: *mut SQLSMALLINT,
                          Description: *mut SQLCHAR,
                          BufferLength2: SQLSMALLINT,
                          NameLength2: *mut SQLSMALLINT)
                          -> SQLRETURN;
    pub fn SQLDescribeCol(StatementHandle: SQLHSTMT,
                          ColumnNumber: SQLUSMALLINT,
                          ColumnName: *mut SQLCHAR,
                          BufferLength: SQLSMALLINT,
                          NameLength: *mut SQLSMALLINT,
                          DataType: *mut SQLSMALLINT,
                          ColumnSize: *mut SQLULEN,
                          DecimalDigits: *mut SQLSMALLINT,
                          Nullable: *mut SQLSMALLINT)
                          -> SQLRETURN;
    pub fn SQLDisconnect(ConnectionHandle: SQLHDBC) -> SQLRETURN;
    pub fn SQLEndTran(HandleType: SQLSMALLINT,
                      Handle: SQLHANDLE,
                      CompletionType: SQLSMALLINT)
                      -> SQLRETURN;
    pub fn SQLError(EnvironmentHandle: SQLHENV,
                    ConnectionHandle: SQLHDBC,
                    StatementHandle: SQLHSTMT,
                    Sqlstate: *mut SQLCHAR,
                    NativeError: *mut SQLINTEGER,
                    MessageText: *mut SQLCHAR,
                    BufferLength: SQLSMALLINT,
                    TextLength: *mut SQLSMALLINT)
                    -> SQLRETURN;
    pub fn SQLExecDirect(StatementHandle: SQLHSTMT,
                         StatementText: *mut SQLCHAR,
                         TextLength: SQLINTEGER)
                         -> SQLRETURN;
    pub fn SQLExecute(StatementHandle: SQLHSTMT) -> SQLRETURN;
    pub fn SQLFetch(StatementHandle: SQLHSTMT) -> SQLRETURN;
    pub fn SQLFetchScroll(StatementHandle: SQLHSTMT,
                          FetchOrientation: SQLSMALLINT,
                          FetchOffset: SQLLEN)
                          -> SQLRETURN;
    pub fn SQLFreeConnect(ConnectionHandle: SQLHDBC) -> SQLRETURN;
    pub fn SQLFreeEnv(EnvironmentHandle: SQLHENV) -> SQLRETURN;
    pub fn SQLFreeHandle(HandleType: SQLSMALLINT, Handle: SQLHANDLE) -> SQLRETURN;
    pub fn SQLFreeStmt(StatementHandle: SQLHSTMT, Option: SQLUSMALLINT) -> SQLRETURN;
    pub fn SQLGetConnectAttr(ConnectionHandle: SQLHDBC,
                             Attribute: SQLINTEGER,
                             Value: SQLPOINTER,
                             BufferLength: SQLINTEGER,
                             StringLength: *mut SQLINTEGER)
                             -> SQLRETURN;
    pub fn SQLGetConnectOption(ConnectionHandle: SQLHDBC,
                               Option: SQLUSMALLINT,
                               Value: SQLPOINTER)
                               -> SQLRETURN;
    pub fn SQLGetCursorName(StatementHandle: SQLHSTMT,
                            CursorName: *mut SQLCHAR,
                            BufferLength: SQLSMALLINT,
                            NameLength: *mut SQLSMALLINT)
                            -> SQLRETURN;
    pub fn SQLGetData(StatementHandle: SQLHSTMT,
                      ColumnNumber: SQLUSMALLINT,
                      TargetType: SQLSMALLINT,
                      TargetValue: SQLPOINTER,
                      BufferLength: SQLLEN,
                      StrLen_or_Ind: *mut SQLLEN)
                      -> SQLRETURN;
    pub fn SQLGetDescField(DescriptorHandle: SQLHDESC,
                           RecNumber: SQLSMALLINT,
                           FieldIdentifier: SQLSMALLINT,
                           Value: SQLPOINTER,
                           BufferLength: SQLINTEGER,
                           StringLength: *mut SQLINTEGER)
                           -> SQLRETURN;
    pub fn SQLGetDescRec(DescriptorHandle: SQLHDESC,
                         RecNumber: SQLSMALLINT,
                         Name: *mut SQLCHAR,
                         BufferLength: SQLSMALLINT,
                         StringLength: *mut SQLSMALLINT,
                         Type: *mut SQLSMALLINT,
                         SubType: *mut SQLSMALLINT,
                         Length: *mut SQLLEN,
                         Precision: *mut SQLSMALLINT,
                         Scale: *mut SQLSMALLINT,
                         Nullable: *mut SQLSMALLINT)
                         -> SQLRETURN;
    pub fn SQLGetDiagField(HandleType: SQLSMALLINT,
                           Handle: SQLHANDLE,
                           RecNumber: SQLSMALLINT,
                           DiagIdentifier: SQLSMALLINT,
                           DiagInfo: SQLPOINTER,
                           BufferLength: SQLSMALLINT,
                           StringLength: *mut SQLSMALLINT)
                           -> SQLRETURN;
    pub fn SQLGetDiagRec(HandleType: SQLSMALLINT,
                         Handle: SQLHANDLE,
                         RecNumber: SQLSMALLINT,
                         Sqlstate: *mut SQLCHAR,
                         NativeError: *mut SQLINTEGER,
                         MessageText: *mut SQLCHAR,
                         BufferLength: SQLSMALLINT,
                         TextLength: *mut SQLSMALLINT)
                         -> SQLRETURN;
    pub fn SQLGetEnvAttr(EnvironmentHandle: SQLHENV,
                         Attribute: SQLINTEGER,
                         Value: SQLPOINTER,
                         BufferLength: SQLINTEGER,
                         StringLength: *mut SQLINTEGER)
                         -> SQLRETURN;
    pub fn SQLGetFunctions(ConnectionHandle: SQLHDBC,
                           FunctionId: SQLUSMALLINT,
                           Supported: *mut SQLUSMALLINT)
                           -> SQLRETURN;
    pub fn SQLGetInfo(ConnectionHandle: SQLHDBC,
                      InfoType: SQLUSMALLINT,
                      InfoValue: SQLPOINTER,
                      BufferLength: SQLSMALLINT,
                      StringLength: *mut SQLSMALLINT)
                      -> SQLRETURN;
    pub fn SQLGetStmtAttr(StatementHandle: SQLHSTMT,
                          Attribute: SQLINTEGER,
                          Value: SQLPOINTER,
                          BufferLength: SQLINTEGER,
                          StringLength: *mut SQLINTEGER)
                          -> SQLRETURN;
    pub fn SQLGetStmtOption(StatementHandle: SQLHSTMT,
                            Option: SQLUSMALLINT,
                            Value: SQLPOINTER)
                            -> SQLRETURN;
    pub fn SQLGetTypeInfo(StatementHandle: SQLHSTMT, DataType: SQLSMALLINT) -> SQLRETURN;
    pub fn SQLNumResultCols(StatementHandle: SQLHSTMT, ColumnCount: *mut SQLSMALLINT) -> SQLRETURN;
    pub fn SQLParamData(StatementHandle: SQLHSTMT, Value: *mut SQLPOINTER) -> SQLRETURN;
    pub fn SQLPrepare(StatementHandle: SQLHSTMT,
                      StatementText: *mut SQLCHAR,
                      TextLength: SQLINTEGER)
                      -> SQLRETURN;
    pub fn SQLPutData(StatementHandle: SQLHSTMT,
                      Data: SQLPOINTER,
                      StrLen_or_Ind: SQLLEN)
                      -> SQLRETURN;
    pub fn SQLRowCount(StatementHandle: SQLHSTMT, RowCount: *mut SQLLEN) -> SQLRETURN;
    pub fn SQLSetConnectAttr(ConnectionHandle: SQLHDBC,
                             Attribute: SQLINTEGER,
                             Value: SQLPOINTER,
                             StringLength: SQLINTEGER)
                             -> SQLRETURN;
    pub fn SQLSetConnectOption(ConnectionHandle: SQLHDBC,
                               Option: SQLUSMALLINT,
                               Value: SQLULEN)
                               -> SQLRETURN;
    pub fn SQLSetCursorName(StatementHandle: SQLHSTMT,
                            CursorName: *mut SQLCHAR,
                            NameLength: SQLSMALLINT)
                            -> SQLRETURN;
    pub fn SQLSetDescField(DescriptorHandle: SQLHDESC,
                           RecNumber: SQLSMALLINT,
                           FieldIdentifier: SQLSMALLINT,
                           Value: SQLPOINTER,
                           BufferLength: SQLINTEGER)
                           -> SQLRETURN;
    pub fn SQLSetDescRec(DescriptorHandle: SQLHDESC,
                         RecNumber: SQLSMALLINT,
                         Type: SQLSMALLINT,
                         SubType: SQLSMALLINT,
                         Length: SQLLEN,
                         Precision: SQLSMALLINT,
                         Scale: SQLSMALLINT,
                         Data: SQLPOINTER,
                         StringLength: *mut SQLLEN,
                         Indicator: *mut SQLLEN)
                         -> SQLRETURN;
    pub fn SQLSetEnvAttr(EnvironmentHandle: SQLHENV,
                         Attribute: SQLINTEGER,
                         Value: SQLPOINTER,
                         StringLength: SQLINTEGER)
                         -> SQLRETURN;
    pub fn SQLSetParam(StatementHandle: SQLHSTMT,
                       ParameterNumber: SQLUSMALLINT,
                       ValueType: SQLSMALLINT,
                       ParameterType: SQLSMALLINT,
                       LengthPrecision: SQLULEN,
                       ParameterScale: SQLSMALLINT,
                       ParameterValue: SQLPOINTER,
                       StrLen_or_Ind: *mut SQLLEN)
                       -> SQLRETURN;
    pub fn SQLSetStmtAttr(StatementHandle: SQLHSTMT,
                          Attribute: SQLINTEGER,
                          Value: SQLPOINTER,
                          StringLength: SQLINTEGER)
                          -> SQLRETURN;
    pub fn SQLSetStmtOption(StatementHandle: SQLHSTMT,
                            Option: SQLUSMALLINT,
                            Value: SQLULEN)
                            -> SQLRETURN;
    pub fn SQLSpecialColumns(StatementHandle: SQLHSTMT,
                             IdentifierType: SQLUSMALLINT,
                             CatalogName: *mut SQLCHAR,
                             NameLength1: SQLSMALLINT,
                             SchemaName: *mut SQLCHAR,
                             NameLength2: SQLSMALLINT,
                             TableName: *mut SQLCHAR,
                             NameLength3: SQLSMALLINT,
                             Scope: SQLUSMALLINT,
                             Nullable: SQLUSMALLINT)
                             -> SQLRETURN;
    pub fn SQLStatistics(StatementHandle: SQLHSTMT,
                         CatalogName: *mut SQLCHAR,
                         NameLength1: SQLSMALLINT,
                         SchemaName: *mut SQLCHAR,
                         NameLength2: SQLSMALLINT,
                         TableName: *mut SQLCHAR,
                         NameLength3: SQLSMALLINT,
                         Unique: SQLUSMALLINT,
                         Reserved: SQLUSMALLINT)
                         -> SQLRETURN;
    pub fn SQLTables(StatementHandle: SQLHSTMT,
                     CatalogName: *mut SQLCHAR,
                     NameLength1: SQLSMALLINT,
                     SchemaName: *mut SQLCHAR,
                     NameLength2: SQLSMALLINT,
                     TableName: *mut SQLCHAR,
                     NameLength3: SQLSMALLINT,
                     TableType: *mut SQLCHAR,
                     NameLength4: SQLSMALLINT)
                     -> SQLRETURN;
    pub fn SQLTransact(EnvironmentHandle: SQLHENV,
                       ConnectionHandle: SQLHDBC,
                       CompletionType: SQLUSMALLINT)
                       -> SQLRETURN;
    pub fn SQLDriverConnect(hdbc: SQLHDBC,
                            hwnd: SQLHWND,
                            szConnStrIn: *mut SQLCHAR,
                            cbConnStrIn: SQLSMALLINT,
                            szConnStrOut: *mut SQLCHAR,
                            cbConnStrOutMax: SQLSMALLINT,
                            pcbConnStrOut: *mut SQLSMALLINT,
                            fDriverCompletion: SQLUSMALLINT)
                            -> SQLRETURN;
    pub fn SQLBrowseConnect(hdbc: SQLHDBC,
                            szConnStrIn: *mut SQLCHAR,
                            cbConnStrIn: SQLSMALLINT,
                            szConnStrOut: *mut SQLCHAR,
                            cbConnStrOutMax: SQLSMALLINT,
                            pcbConnStrOut: *mut SQLSMALLINT)
                            -> SQLRETURN;
    pub fn SQLBulkOperations(StatementHandle: SQLHSTMT, Operation: SQLSMALLINT) -> SQLRETURN;
    pub fn SQLColAttributes(hstmt: SQLHSTMT,
                            icol: SQLUSMALLINT,
                            fDescType: SQLUSMALLINT,
                            rgbDesc: SQLPOINTER,
                            cbDescMax: SQLSMALLINT,
                            pcbDesc: *mut SQLSMALLINT,
                            pfDesc: *mut SQLLEN)
                            -> SQLRETURN;
    pub fn SQLColumnPrivileges(hstmt: SQLHSTMT,
                               szCatalogName: *mut SQLCHAR,
                               cbCatalogName: SQLSMALLINT,
                               szSchemaName: *mut SQLCHAR,
                               cbSchemaName: SQLSMALLINT,
                               szTableName: *mut SQLCHAR,
                               cbTableName: SQLSMALLINT,
                               szColumnName: *mut SQLCHAR,
                               cbColumnName: SQLSMALLINT)
                               -> SQLRETURN;
    pub fn SQLDescribeParam(hstmt: SQLHSTMT,
                            ipar: SQLUSMALLINT,
                            pfSqlType: *mut SQLSMALLINT,
                            pcbParamDef: *mut SQLULEN,
                            pibScale: *mut SQLSMALLINT,
                            pfNullable: *mut SQLSMALLINT)
                            -> SQLRETURN;
    pub fn SQLExtendedFetch(hstmt: SQLHSTMT,
                            fFetchType: SQLUSMALLINT,
                            irow: SQLLEN,
                            pcrow: *mut SQLULEN,
                            rgfRowStatus: *mut SQLUSMALLINT)
                            -> SQLRETURN;
    pub fn SQLForeignKeys(hstmt: SQLHSTMT,
                          szPkCatalogName: *mut SQLCHAR,
                          cbPkCatalogName: SQLSMALLINT,
                          szPkSchemaName: *mut SQLCHAR,
                          cbPkSchemaName: SQLSMALLINT,
                          szPkTableName: *mut SQLCHAR,
                          cbPkTableName: SQLSMALLINT,
                          szFkCatalogName: *mut SQLCHAR,
                          cbFkCatalogName: SQLSMALLINT,
                          szFkSchemaName: *mut SQLCHAR,
                          cbFkSchemaName: SQLSMALLINT,
                          szFkTableName: *mut SQLCHAR,
                          cbFkTableName: SQLSMALLINT)
                          -> SQLRETURN;
    pub fn SQLMoreResults(hstmt: SQLHSTMT) -> SQLRETURN;
    pub fn SQLNativeSql(hdbc: SQLHDBC,
                        szSqlStrIn: *mut SQLCHAR,
                        cbSqlStrIn: SQLINTEGER,
                        szSqlStr: *mut SQLCHAR,
                        cbSqlStrMax: SQLINTEGER,
                        pcbSqlStr: *mut SQLINTEGER)
                        -> SQLRETURN;
    pub fn SQLNumParams(hstmt: SQLHSTMT, pcpar: *mut SQLSMALLINT) -> SQLRETURN;
    pub fn SQLParamOptions(hstmt: SQLHSTMT, crow: SQLULEN, pirow: *mut SQLULEN) -> SQLRETURN;
    pub fn SQLPrimaryKeys(hstmt: SQLHSTMT,
                          szCatalogName: *mut SQLCHAR,
                          cbCatalogName: SQLSMALLINT,
                          szSchemaName: *mut SQLCHAR,
                          cbSchemaName: SQLSMALLINT,
                          szTableName: *mut SQLCHAR,
                          cbTableName: SQLSMALLINT)
                          -> SQLRETURN;
    pub fn SQLProcedureColumns(hstmt: SQLHSTMT,
                               szCatalogName: *mut SQLCHAR,
                               cbCatalogName: SQLSMALLINT,
                               szSchemaName: *mut SQLCHAR,
                               cbSchemaName: SQLSMALLINT,
                               szProcName: *mut SQLCHAR,
                               cbProcName: SQLSMALLINT,
                               szColumnName: *mut SQLCHAR,
                               cbColumnName: SQLSMALLINT)
                               -> SQLRETURN;
    pub fn SQLProcedures(hstmt: SQLHSTMT,
                         szCatalogName: *mut SQLCHAR,
                         cbCatalogName: SQLSMALLINT,
                         szSchemaName: *mut SQLCHAR,
                         cbSchemaName: SQLSMALLINT,
                         szProcName: *mut SQLCHAR,
                         cbProcName: SQLSMALLINT)
                         -> SQLRETURN;
    pub fn SQLSetPos(hstmt: SQLHSTMT,
                     irow: SQLSETPOSIROW,
                     fOption: SQLUSMALLINT,
                     fLock: SQLUSMALLINT)
                     -> SQLRETURN;
    pub fn SQLTablePrivileges(hstmt: SQLHSTMT,
                              szCatalogName: *mut SQLCHAR,
                              cbCatalogName: SQLSMALLINT,
                              szSchemaName: *mut SQLCHAR,
                              cbSchemaName: SQLSMALLINT,
                              szTableName: *mut SQLCHAR,
                              cbTableName: SQLSMALLINT)
                              -> SQLRETURN;
    pub fn SQLDrivers(henv: SQLHENV,
                      fDirection: SQLUSMALLINT,
                      szDriverDesc: *mut SQLCHAR,
                      cbDriverDescMax: SQLSMALLINT,
                      pcbDriverDesc: *mut SQLSMALLINT,
                      szDriverAttributes: *mut SQLCHAR,
                      cbDrvrAttrMax: SQLSMALLINT,
                      pcbDrvrAttr: *mut SQLSMALLINT)
                      -> SQLRETURN;
    pub fn SQLBindParameter(hstmt: SQLHSTMT,
                            ipar: SQLUSMALLINT,
                            fParamType: SQLSMALLINT,
                            fCType: SQLSMALLINT,
                            fSqlType: SQLSMALLINT,
                            cbColDef: SQLULEN,
                            ibScale: SQLSMALLINT,
                            rgbValue: SQLPOINTER,
                            cbValueMax: SQLLEN,
                            pcbValue: *mut SQLLEN)
                            -> SQLRETURN;
    pub fn SQLAllocHandleStd(fHandleType: SQLSMALLINT,
                             hInput: SQLHANDLE,
                             phOutput: *mut SQLHANDLE)
                             -> SQLRETURN;
    pub fn SQLSetScrollOptions(hstmt: SQLHSTMT,
                               fConcurrency: SQLUSMALLINT,
                               crowKeyset: SQLLEN,
                               crowRowset: SQLUSMALLINT)
                               -> SQLRETURN;
    pub fn TraceOpenLogFile(arg1: SQLPOINTER, arg2: LPSTR, arg3: LPSTR, arg4: DWORD) -> RETCODE;
    pub fn TraceCloseLogFile(arg1: SQLPOINTER) -> RETCODE;
    pub fn TraceReturn(arg1: SQLPOINTER, arg2: SQLRETURN) -> SQLRETURN;
    pub fn TraceVersion() -> DWORD;
    pub fn TraceVSControl(arg1: DWORD) -> RETCODE;
    pub fn FireVSDebugEvent(arg1: PODBC_VS_ARGS) -> VOID;
    pub fn ODBCSetTryWaitValue(dwValue: DWORD) -> ::std::os::raw::c_int;
    pub fn ODBCGetTryWaitValue() -> DWORD;
    pub fn SQLColAttributeW(hstmt: SQLHSTMT,
                            iCol: SQLUSMALLINT,
                            iField: SQLUSMALLINT,
                            pCharAttr: SQLPOINTER,
                            cbCharAttrMax: SQLSMALLINT,
                            pcbCharAttr: *mut SQLSMALLINT,
                            pNumAttr: *mut SQLLEN)
                            -> SQLRETURN;
    pub fn SQLColAttributesW(hstmt: SQLHSTMT,
                             icol: SQLUSMALLINT,
                             fDescType: SQLUSMALLINT,
                             rgbDesc: SQLPOINTER,
                             cbDescMax: SQLSMALLINT,
                             pcbDesc: *mut SQLSMALLINT,
                             pfDesc: *mut SQLLEN)
                             -> SQLRETURN;
    pub fn SQLConnectW(hdbc: SQLHDBC,
                       szDSN: *mut SQLWCHAR,
                       cbDSN: SQLSMALLINT,
                       szUID: *mut SQLWCHAR,
                       cbUID: SQLSMALLINT,
                       szAuthStr: *mut SQLWCHAR,
                       cbAuthStr: SQLSMALLINT)
                       -> SQLRETURN;
    pub fn SQLDescribeColW(hstmt: SQLHSTMT,
                           icol: SQLUSMALLINT,
                           szColName: *mut SQLWCHAR,
                           cbColNameMax: SQLSMALLINT,
                           pcbColName: *mut SQLSMALLINT,
                           pfSqlType: *mut SQLSMALLINT,
                           pcbColDef: *mut SQLULEN,
                           pibScale: *mut SQLSMALLINT,
                           pfNullable: *mut SQLSMALLINT)
                           -> SQLRETURN;
    pub fn SQLErrorW(henv: SQLHENV,
                     hdbc: SQLHDBC,
                     hstmt: SQLHSTMT,
                     szSqlState: *mut SQLWCHAR,
                     pfNativeError: *mut SQLINTEGER,
                     szErrorMsg: *mut SQLWCHAR,
                     cbErrorMsgMax: SQLSMALLINT,
                     pcbErrorMsg: *mut SQLSMALLINT)
                     -> SQLRETURN;
    pub fn SQLExecDirectW(hstmt: SQLHSTMT,
                          szSqlStr: *mut SQLWCHAR,
                          cbSqlStr: SQLINTEGER)
                          -> SQLRETURN;
    pub fn SQLGetConnectAttrW(hdbc: SQLHDBC,
                              fAttribute: SQLINTEGER,
                              rgbValue: SQLPOINTER,
                              cbValueMax: SQLINTEGER,
                              pcbValue: *mut SQLINTEGER)
                              -> SQLRETURN;
    pub fn SQLGetCursorNameW(hstmt: SQLHSTMT,
                             szCursor: *mut SQLWCHAR,
                             cbCursorMax: SQLSMALLINT,
                             pcbCursor: *mut SQLSMALLINT)
                             -> SQLRETURN;
    pub fn SQLSetDescFieldW(DescriptorHandle: SQLHDESC,
                            RecNumber: SQLSMALLINT,
                            FieldIdentifier: SQLSMALLINT,
                            Value: SQLPOINTER,
                            BufferLength: SQLINTEGER)
                            -> SQLRETURN;
    pub fn SQLGetDescFieldW(hdesc: SQLHDESC,
                            iRecord: SQLSMALLINT,
                            iField: SQLSMALLINT,
                            rgbValue: SQLPOINTER,
                            cbValueMax: SQLINTEGER,
                            pcbValue: *mut SQLINTEGER)
                            -> SQLRETURN;
    pub fn SQLGetDescRecW(hdesc: SQLHDESC,
                          iRecord: SQLSMALLINT,
                          szName: *mut SQLWCHAR,
                          cbNameMax: SQLSMALLINT,
                          pcbName: *mut SQLSMALLINT,
                          pfType: *mut SQLSMALLINT,
                          pfSubType: *mut SQLSMALLINT,
                          pLength: *mut SQLLEN,
                          pPrecision: *mut SQLSMALLINT,
                          pScale: *mut SQLSMALLINT,
                          pNullable: *mut SQLSMALLINT)
                          -> SQLRETURN;
    pub fn SQLGetDiagFieldW(fHandleType: SQLSMALLINT,
                            handle: SQLHANDLE,
                            iRecord: SQLSMALLINT,
                            fDiagField: SQLSMALLINT,
                            rgbDiagInfo: SQLPOINTER,
                            cbDiagInfoMax: SQLSMALLINT,
                            pcbDiagInfo: *mut SQLSMALLINT)
                            -> SQLRETURN;
    pub fn SQLGetDiagRecW(fHandleType: SQLSMALLINT,
                          handle: SQLHANDLE,
                          iRecord: SQLSMALLINT,
                          szSqlState: *mut SQLWCHAR,
                          pfNativeError: *mut SQLINTEGER,
                          szErrorMsg: *mut SQLWCHAR,
                          cbErrorMsgMax: SQLSMALLINT,
                          pcbErrorMsg: *mut SQLSMALLINT)
                          -> SQLRETURN;
    pub fn SQLPrepareW(hstmt: SQLHSTMT,
                       szSqlStr: *mut SQLWCHAR,
                       cbSqlStr: SQLINTEGER)
                       -> SQLRETURN;
    pub fn SQLSetConnectAttrW(hdbc: SQLHDBC,
                              fAttribute: SQLINTEGER,
                              rgbValue: SQLPOINTER,
                              cbValue: SQLINTEGER)
                              -> SQLRETURN;
    pub fn SQLSetCursorNameW(hstmt: SQLHSTMT,
                             szCursor: *mut SQLWCHAR,
                             cbCursor: SQLSMALLINT)
                             -> SQLRETURN;
    pub fn SQLColumnsW(hstmt: SQLHSTMT,
                       szCatalogName: *mut SQLWCHAR,
                       cbCatalogName: SQLSMALLINT,
                       szSchemaName: *mut SQLWCHAR,
                       cbSchemaName: SQLSMALLINT,
                       szTableName: *mut SQLWCHAR,
                       cbTableName: SQLSMALLINT,
                       szColumnName: *mut SQLWCHAR,
                       cbColumnName: SQLSMALLINT)
                       -> SQLRETURN;
    pub fn SQLGetConnectOptionW(hdbc: SQLHDBC,
                                fOption: SQLUSMALLINT,
                                pvParam: SQLPOINTER)
                                -> SQLRETURN;
    pub fn SQLGetInfoW(hdbc: SQLHDBC,
                       fInfoType: SQLUSMALLINT,
                       rgbInfoValue: SQLPOINTER,
                       cbInfoValueMax: SQLSMALLINT,
                       pcbInfoValue: *mut SQLSMALLINT)
                       -> SQLRETURN;
    pub fn SQLGetTypeInfoW(StatementHandle: SQLHSTMT, DataType: SQLSMALLINT) -> SQLRETURN;
    pub fn SQLSetConnectOptionW(hdbc: SQLHDBC,
                                fOption: SQLUSMALLINT,
                                vParam: SQLULEN)
                                -> SQLRETURN;
    pub fn SQLSpecialColumnsW(hstmt: SQLHSTMT,
                              fColType: SQLUSMALLINT,
                              szCatalogName: *mut SQLWCHAR,
                              cbCatalogName: SQLSMALLINT,
                              szSchemaName: *mut SQLWCHAR,
                              cbSchemaName: SQLSMALLINT,
                              szTableName: *mut SQLWCHAR,
                              cbTableName: SQLSMALLINT,
                              fScope: SQLUSMALLINT,
                              fNullable: SQLUSMALLINT)
                              -> SQLRETURN;
    pub fn SQLStatisticsW(hstmt: SQLHSTMT,
                          szCatalogName: *mut SQLWCHAR,
                          cbCatalogName: SQLSMALLINT,
                          szSchemaName: *mut SQLWCHAR,
                          cbSchemaName: SQLSMALLINT,
                          szTableName: *mut SQLWCHAR,
                          cbTableName: SQLSMALLINT,
                          fUnique: SQLUSMALLINT,
                          fAccuracy: SQLUSMALLINT)
                          -> SQLRETURN;
    pub fn SQLTablesW(hstmt: SQLHSTMT,
                      szCatalogName: *mut SQLWCHAR,
                      cbCatalogName: SQLSMALLINT,
                      szSchemaName: *mut SQLWCHAR,
                      cbSchemaName: SQLSMALLINT,
                      szTableName: *mut SQLWCHAR,
                      cbTableName: SQLSMALLINT,
                      szTableType: *mut SQLWCHAR,
                      cbTableType: SQLSMALLINT)
                      -> SQLRETURN;
    pub fn SQLDataSourcesW(henv: SQLHENV,
                           fDirection: SQLUSMALLINT,
                           szDSN: *mut SQLWCHAR,
                           cbDSNMax: SQLSMALLINT,
                           pcbDSN: *mut SQLSMALLINT,
                           szDescription: *mut SQLWCHAR,
                           cbDescriptionMax: SQLSMALLINT,
                           pcbDescription: *mut SQLSMALLINT)
                           -> SQLRETURN;
    pub fn SQLDriverConnectW(hdbc: SQLHDBC,
                             hwnd: SQLHWND,
                             szConnStrIn: *mut SQLWCHAR,
                             cbConnStrIn: SQLSMALLINT,
                             szConnStrOut: *mut SQLWCHAR,
                             cbConnStrOutMax: SQLSMALLINT,
                             pcbConnStrOut: *mut SQLSMALLINT,
                             fDriverCompletion: SQLUSMALLINT)
                             -> SQLRETURN;
    pub fn SQLBrowseConnectW(hdbc: SQLHDBC,
                             szConnStrIn: *mut SQLWCHAR,
                             cbConnStrIn: SQLSMALLINT,
                             szConnStrOut: *mut SQLWCHAR,
                             cbConnStrOutMax: SQLSMALLINT,
                             pcbConnStrOut: *mut SQLSMALLINT)
                             -> SQLRETURN;
    pub fn SQLColumnPrivilegesW(hstmt: SQLHSTMT,
                                szCatalogName: *mut SQLWCHAR,
                                cbCatalogName: SQLSMALLINT,
                                szSchemaName: *mut SQLWCHAR,
                                cbSchemaName: SQLSMALLINT,
                                szTableName: *mut SQLWCHAR,
                                cbTableName: SQLSMALLINT,
                                szColumnName: *mut SQLWCHAR,
                                cbColumnName: SQLSMALLINT)
                                -> SQLRETURN;
    pub fn SQLGetStmtAttrW(hstmt: SQLHSTMT,
                           fAttribute: SQLINTEGER,
                           rgbValue: SQLPOINTER,
                           cbValueMax: SQLINTEGER,
                           pcbValue: *mut SQLINTEGER)
                           -> SQLRETURN;
    pub fn SQLSetStmtAttrW(hstmt: SQLHSTMT,
                           fAttribute: SQLINTEGER,
                           rgbValue: SQLPOINTER,
                           cbValueMax: SQLINTEGER)
                           -> SQLRETURN;
    pub fn SQLForeignKeysW(hstmt: SQLHSTMT,
                           szPkCatalogName: *mut SQLWCHAR,
                           cbPkCatalogName: SQLSMALLINT,
                           szPkSchemaName: *mut SQLWCHAR,
                           cbPkSchemaName: SQLSMALLINT,
                           szPkTableName: *mut SQLWCHAR,
                           cbPkTableName: SQLSMALLINT,
                           szFkCatalogName: *mut SQLWCHAR,
                           cbFkCatalogName: SQLSMALLINT,
                           szFkSchemaName: *mut SQLWCHAR,
                           cbFkSchemaName: SQLSMALLINT,
                           szFkTableName: *mut SQLWCHAR,
                           cbFkTableName: SQLSMALLINT)
                           -> SQLRETURN;
    pub fn SQLNativeSqlW(hdbc: SQLHDBC,
                         szSqlStrIn: *mut SQLWCHAR,
                         cbSqlStrIn: SQLINTEGER,
                         szSqlStr: *mut SQLWCHAR,
                         cbSqlStrMax: SQLINTEGER,
                         pcbSqlStr: *mut SQLINTEGER)
                         -> SQLRETURN;
    pub fn SQLPrimaryKeysW(hstmt: SQLHSTMT,
                           szCatalogName: *mut SQLWCHAR,
                           cbCatalogName: SQLSMALLINT,
                           szSchemaName: *mut SQLWCHAR,
                           cbSchemaName: SQLSMALLINT,
                           szTableName: *mut SQLWCHAR,
                           cbTableName: SQLSMALLINT)
                           -> SQLRETURN;
    pub fn SQLProcedureColumnsW(hstmt: SQLHSTMT,
                                szCatalogName: *mut SQLWCHAR,
                                cbCatalogName: SQLSMALLINT,
                                szSchemaName: *mut SQLWCHAR,
                                cbSchemaName: SQLSMALLINT,
                                szProcName: *mut SQLWCHAR,
                                cbProcName: SQLSMALLINT,
                                szColumnName: *mut SQLWCHAR,
                                cbColumnName: SQLSMALLINT)
                                -> SQLRETURN;
    pub fn SQLProceduresW(hstmt: SQLHSTMT,
                          szCatalogName: *mut SQLWCHAR,
                          cbCatalogName: SQLSMALLINT,
                          szSchemaName: *mut SQLWCHAR,
                          cbSchemaName: SQLSMALLINT,
                          szProcName: *mut SQLWCHAR,
                          cbProcName: SQLSMALLINT)
                          -> SQLRETURN;
    pub fn SQLTablePrivilegesW(hstmt: SQLHSTMT,
                               szCatalogName: *mut SQLWCHAR,
                               cbCatalogName: SQLSMALLINT,
                               szSchemaName: *mut SQLWCHAR,
                               cbSchemaName: SQLSMALLINT,
                               szTableName: *mut SQLWCHAR,
                               cbTableName: SQLSMALLINT)
                               -> SQLRETURN;
    pub fn SQLDriversW(henv: SQLHENV,
                       fDirection: SQLUSMALLINT,
                       szDriverDesc: *mut SQLWCHAR,
                       cbDriverDescMax: SQLSMALLINT,
                       pcbDriverDesc: *mut SQLSMALLINT,
                       szDriverAttributes: *mut SQLWCHAR,
                       cbDrvrAttrMax: SQLSMALLINT,
                       pcbDrvrAttr: *mut SQLSMALLINT)
                       -> SQLRETURN;
    pub fn SQLColAttributeA(hstmt: SQLHSTMT,
                            iCol: SQLSMALLINT,
                            iField: SQLSMALLINT,
                            pCharAttr: SQLPOINTER,
                            cbCharAttrMax: SQLSMALLINT,
                            pcbCharAttr: *mut SQLSMALLINT,
                            pNumAttr: *mut SQLLEN)
                            -> SQLRETURN;
    pub fn SQLColAttributesA(hstmt: SQLHSTMT,
                             icol: SQLUSMALLINT,
                             fDescType: SQLUSMALLINT,
                             rgbDesc: SQLPOINTER,
                             cbDescMax: SQLSMALLINT,
                             pcbDesc: *mut SQLSMALLINT,
                             pfDesc: *mut SQLLEN)
                             -> SQLRETURN;
    pub fn SQLConnectA(hdbc: SQLHDBC,
                       szDSN: *mut SQLCHAR,
                       cbDSN: SQLSMALLINT,
                       szUID: *mut SQLCHAR,
                       cbUID: SQLSMALLINT,
                       szAuthStr: *mut SQLCHAR,
                       cbAuthStr: SQLSMALLINT)
                       -> SQLRETURN;
    pub fn SQLDescribeColA(hstmt: SQLHSTMT,
                           icol: SQLUSMALLINT,
                           szColName: *mut SQLCHAR,
                           cbColNameMax: SQLSMALLINT,
                           pcbColName: *mut SQLSMALLINT,
                           pfSqlType: *mut SQLSMALLINT,
                           pcbColDef: *mut SQLULEN,
                           pibScale: *mut SQLSMALLINT,
                           pfNullable: *mut SQLSMALLINT)
                           -> SQLRETURN;
    pub fn SQLErrorA(henv: SQLHENV,
                     hdbc: SQLHDBC,
                     hstmt: SQLHSTMT,
                     szSqlState: *mut SQLCHAR,
                     pfNativeError: *mut SQLINTEGER,
                     szErrorMsg: *mut SQLCHAR,
                     cbErrorMsgMax: SQLSMALLINT,
                     pcbErrorMsg: *mut SQLSMALLINT)
                     -> SQLRETURN;
    pub fn SQLExecDirectA(hstmt: SQLHSTMT,
                          szSqlStr: *mut SQLCHAR,
                          cbSqlStr: SQLINTEGER)
                          -> SQLRETURN;
    pub fn SQLGetConnectAttrA(hdbc: SQLHDBC,
                              fAttribute: SQLINTEGER,
                              rgbValue: SQLPOINTER,
                              cbValueMax: SQLINTEGER,
                              pcbValue: *mut SQLINTEGER)
                              -> SQLRETURN;
    pub fn SQLGetCursorNameA(hstmt: SQLHSTMT,
                             szCursor: *mut SQLCHAR,
                             cbCursorMax: SQLSMALLINT,
                             pcbCursor: *mut SQLSMALLINT)
                             -> SQLRETURN;
    pub fn SQLGetDescFieldA(hdesc: SQLHDESC,
                            iRecord: SQLSMALLINT,
                            iField: SQLSMALLINT,
                            rgbValue: SQLPOINTER,
                            cbValueMax: SQLINTEGER,
                            pcbValue: *mut SQLINTEGER)
                            -> SQLRETURN;
    pub fn SQLGetDescRecA(hdesc: SQLHDESC,
                          iRecord: SQLSMALLINT,
                          szName: *mut SQLCHAR,
                          cbNameMax: SQLSMALLINT,
                          pcbName: *mut SQLSMALLINT,
                          pfType: *mut SQLSMALLINT,
                          pfSubType: *mut SQLSMALLINT,
                          pLength: *mut SQLLEN,
                          pPrecision: *mut SQLSMALLINT,
                          pScale: *mut SQLSMALLINT,
                          pNullable: *mut SQLSMALLINT)
                          -> SQLRETURN;
    pub fn SQLGetDiagFieldA(fHandleType: SQLSMALLINT,
                            handle: SQLHANDLE,
                            iRecord: SQLSMALLINT,
                            fDiagField: SQLSMALLINT,
                            rgbDiagInfo: SQLPOINTER,
                            cbDiagInfoMax: SQLSMALLINT,
                            pcbDiagInfo: *mut SQLSMALLINT)
                            -> SQLRETURN;
    pub fn SQLGetDiagRecA(fHandleType: SQLSMALLINT,
                          handle: SQLHANDLE,
                          iRecord: SQLSMALLINT,
                          szSqlState: *mut SQLCHAR,
                          pfNativeError: *mut SQLINTEGER,
                          szErrorMsg: *mut SQLCHAR,
                          cbErrorMsgMax: SQLSMALLINT,
                          pcbErrorMsg: *mut SQLSMALLINT)
                          -> SQLRETURN;
    pub fn SQLGetStmtAttrA(hstmt: SQLHSTMT,
                           fAttribute: SQLINTEGER,
                           rgbValue: SQLPOINTER,
                           cbValueMax: SQLINTEGER,
                           pcbValue: *mut SQLINTEGER)
                           -> SQLRETURN;
    pub fn SQLGetTypeInfoA(StatementHandle: SQLHSTMT, DataTyoe: SQLSMALLINT) -> SQLRETURN;
    pub fn SQLPrepareA(hstmt: SQLHSTMT, szSqlStr: *mut SQLCHAR, cbSqlStr: SQLINTEGER) -> SQLRETURN;
    pub fn SQLSetConnectAttrA(hdbc: SQLHDBC,
                              fAttribute: SQLINTEGER,
                              rgbValue: SQLPOINTER,
                              cbValue: SQLINTEGER)
                              -> SQLRETURN;
    pub fn SQLSetCursorNameA(hstmt: SQLHSTMT,
                             szCursor: *mut SQLCHAR,
                             cbCursor: SQLSMALLINT)
                             -> SQLRETURN;
    pub fn SQLColumnsA(hstmt: SQLHSTMT,
                       szCatalogName: *mut SQLCHAR,
                       cbCatalogName: SQLSMALLINT,
                       szSchemaName: *mut SQLCHAR,
                       cbSchemaName: SQLSMALLINT,
                       szTableName: *mut SQLCHAR,
                       cbTableName: SQLSMALLINT,
                       szColumnName: *mut SQLCHAR,
                       cbColumnName: SQLSMALLINT)
                       -> SQLRETURN;
    pub fn SQLGetConnectOptionA(hdbc: SQLHDBC,
                                fOption: SQLUSMALLINT,
                                pvParam: SQLPOINTER)
                                -> SQLRETURN;
    pub fn SQLGetInfoA(hdbc: SQLHDBC,
                       fInfoType: SQLUSMALLINT,
                       rgbInfoValue: SQLPOINTER,
                       cbInfoValueMax: SQLSMALLINT,
                       pcbInfoValue: *mut SQLSMALLINT)
                       -> SQLRETURN;
    pub fn SQLGetStmtOptionA(hstmt: SQLHSTMT,
                             fOption: SQLUSMALLINT,
                             pvParam: SQLPOINTER)
                             -> SQLRETURN;
    pub fn SQLSetConnectOptionA(hdbc: SQLHDBC,
                                fOption: SQLUSMALLINT,
                                vParam: SQLULEN)
                                -> SQLRETURN;
    pub fn SQLSetStmtOptionA(hstmt: SQLHSTMT, fOption: SQLUSMALLINT, vParam: SQLULEN) -> SQLRETURN;
    pub fn SQLSpecialColumnsA(hstmt: SQLHSTMT,
                              fColType: SQLUSMALLINT,
                              szCatalogName: *mut SQLCHAR,
                              cbCatalogName: SQLSMALLINT,
                              szSchemaName: *mut SQLCHAR,
                              cbSchemaName: SQLSMALLINT,
                              szTableName: *mut SQLCHAR,
                              cbTableName: SQLSMALLINT,
                              fScope: SQLUSMALLINT,
                              fNullable: SQLUSMALLINT)
                              -> SQLRETURN;
    pub fn SQLStatisticsA(hstmt: SQLHSTMT,
                          szCatalogName: *mut SQLCHAR,
                          cbCatalogName: SQLSMALLINT,
                          szSchemaName: *mut SQLCHAR,
                          cbSchemaName: SQLSMALLINT,
                          szTableName: *mut SQLCHAR,
                          cbTableName: SQLSMALLINT,
                          fUnique: SQLUSMALLINT,
                          fAccuracy: SQLUSMALLINT)
                          -> SQLRETURN;
    pub fn SQLTablesA(hstmt: SQLHSTMT,
                      szCatalogName: *mut SQLCHAR,
                      cbCatalogName: SQLSMALLINT,
                      szSchemaName: *mut SQLCHAR,
                      cbSchemaName: SQLSMALLINT,
                      szTableName: *mut SQLCHAR,
                      cbTableName: SQLSMALLINT,
                      szTableType: *mut SQLCHAR,
                      cbTableType: SQLSMALLINT)
                      -> SQLRETURN;
    pub fn SQLDataSourcesA(henv: SQLHENV,
                           fDirection: SQLUSMALLINT,
                           szDSN: *mut SQLCHAR,
                           cbDSNMax: SQLSMALLINT,
                           pcbDSN: *mut SQLSMALLINT,
                           szDescription: *mut SQLCHAR,
                           cbDescriptionMax: SQLSMALLINT,
                           pcbDescription: *mut SQLSMALLINT)
                           -> SQLRETURN;
    pub fn SQLDriverConnectA(hdbc: SQLHDBC,
                             hwnd: SQLHWND,
                             szConnStrIn: *mut SQLCHAR,
                             cbConnStrIn: SQLSMALLINT,
                             szConnStrOut: *mut SQLCHAR,
                             cbConnStrOutMax: SQLSMALLINT,
                             pcbConnStrOut: *mut SQLSMALLINT,
                             fDriverCompletion: SQLUSMALLINT)
                             -> SQLRETURN;
    pub fn SQLBrowseConnectA(hdbc: SQLHDBC,
                             szConnStrIn: *mut SQLCHAR,
                             cbConnStrIn: SQLSMALLINT,
                             szConnStrOut: *mut SQLCHAR,
                             cbConnStrOutMax: SQLSMALLINT,
                             pcbConnStrOut: *mut SQLSMALLINT)
                             -> SQLRETURN;
    pub fn SQLColumnPrivilegesA(hstmt: SQLHSTMT,
                                szCatalogName: *mut SQLCHAR,
                                cbCatalogName: SQLSMALLINT,
                                szSchemaName: *mut SQLCHAR,
                                cbSchemaName: SQLSMALLINT,
                                szTableName: *mut SQLCHAR,
                                cbTableName: SQLSMALLINT,
                                szColumnName: *mut SQLCHAR,
                                cbColumnName: SQLSMALLINT)
                                -> SQLRETURN;
    pub fn SQLDescribeParamA(hstmt: SQLHSTMT,
                             ipar: SQLUSMALLINT,
                             pfSqlType: *mut SQLSMALLINT,
                             pcbParamDef: *mut SQLUINTEGER,
                             pibScale: *mut SQLSMALLINT,
                             pfNullable: *mut SQLSMALLINT)
                             -> SQLRETURN;
    pub fn SQLForeignKeysA(hstmt: SQLHSTMT,
                           szPkCatalogName: *mut SQLCHAR,
                           cbPkCatalogName: SQLSMALLINT,
                           szPkSchemaName: *mut SQLCHAR,
                           cbPkSchemaName: SQLSMALLINT,
                           szPkTableName: *mut SQLCHAR,
                           cbPkTableName: SQLSMALLINT,
                           szFkCatalogName: *mut SQLCHAR,
                           cbFkCatalogName: SQLSMALLINT,
                           szFkSchemaName: *mut SQLCHAR,
                           cbFkSchemaName: SQLSMALLINT,
                           szFkTableName: *mut SQLCHAR,
                           cbFkTableName: SQLSMALLINT)
                           -> SQLRETURN;
    pub fn SQLNativeSqlA(hdbc: SQLHDBC,
                         szSqlStrIn: *mut SQLCHAR,
                         cbSqlStrIn: SQLINTEGER,
                         szSqlStr: *mut SQLCHAR,
                         cbSqlStrMax: SQLINTEGER,
                         pcbSqlStr: *mut SQLINTEGER)
                         -> SQLRETURN;
    pub fn SQLPrimaryKeysA(hstmt: SQLHSTMT,
                           szCatalogName: *mut SQLCHAR,
                           cbCatalogName: SQLSMALLINT,
                           szSchemaName: *mut SQLCHAR,
                           cbSchemaName: SQLSMALLINT,
                           szTableName: *mut SQLCHAR,
                           cbTableName: SQLSMALLINT)
                           -> SQLRETURN;
    pub fn SQLProcedureColumnsA(hstmt: SQLHSTMT,
                                szCatalogName: *mut SQLCHAR,
                                cbCatalogName: SQLSMALLINT,
                                szSchemaName: *mut SQLCHAR,
                                cbSchemaName: SQLSMALLINT,
                                szProcName: *mut SQLCHAR,
                                cbProcName: SQLSMALLINT,
                                szColumnName: *mut SQLCHAR,
                                cbColumnName: SQLSMALLINT)
                                -> SQLRETURN;
    pub fn SQLProceduresA(hstmt: SQLHSTMT,
                          szCatalogName: *mut SQLCHAR,
                          cbCatalogName: SQLSMALLINT,
                          szSchemaName: *mut SQLCHAR,
                          cbSchemaName: SQLSMALLINT,
                          szProcName: *mut SQLCHAR,
                          cbProcName: SQLSMALLINT)
                          -> SQLRETURN;
    pub fn SQLTablePrivilegesA(hstmt: SQLHSTMT,
                               szCatalogName: *mut SQLCHAR,
                               cbCatalogName: SQLSMALLINT,
                               szSchemaName: *mut SQLCHAR,
                               cbSchemaName: SQLSMALLINT,
                               szTableName: *mut SQLCHAR,
                               cbTableName: SQLSMALLINT)
                               -> SQLRETURN;
    pub fn SQLDriversA(henv: SQLHENV,
                       fDirection: SQLUSMALLINT,
                       szDriverDesc: *mut SQLCHAR,
                       cbDriverDescMax: SQLSMALLINT,
                       pcbDriverDesc: *mut SQLSMALLINT,
                       szDriverAttributes: *mut SQLCHAR,
                       cbDrvrAttrMax: SQLSMALLINT,
                       pcbDrvrAttr: *mut SQLSMALLINT)
                       -> SQLRETURN;
}
