/* automatically generated by rust-bindgen */

pub type HWND = *mut ::std::os::raw::c_void;
pub type CHAR = ::std::os::raw::c_char;
pub type TCHAR = ::std::os::raw::c_char;
pub type VOID = ::std::os::raw::c_void;
pub type WORD = ::std::os::raw::c_ushort;
pub type DWORD = ::std::os::raw::c_uint;
pub type BYTE = ::std::os::raw::c_uchar;
pub type WCHAR = ::std::os::raw::c_ushort;
pub type LPWSTR = *mut WCHAR;
pub type LPCSTR = *const ::std::os::raw::c_char;
pub type LPCWSTR = *const WCHAR;
pub type LPTSTR = *mut TCHAR;
pub type LPSTR = *mut ::std::os::raw::c_char;
pub type LPDWORD = *mut DWORD;
pub type HINSTANCE = *mut ::std::os::raw::c_void;
pub type SQLCHAR = ::std::os::raw::c_uchar;
pub type SQLDATE = ::std::os::raw::c_uchar;
pub type SQLDECIMAL = ::std::os::raw::c_uchar;
pub type SQLDOUBLE = ::std::os::raw::c_double;
pub type SQLFLOAT = ::std::os::raw::c_double;
pub type SQLINTEGER = ::std::os::raw::c_int;
pub type SQLUINTEGER = ::std::os::raw::c_uint;
pub type SQLLEN = ::std::os::raw::c_long;
pub type SQLULEN = ::std::os::raw::c_ulong;
pub type SQLSETPOSIROW = ::std::os::raw::c_ulong;
pub type SQLNUMERIC = ::std::os::raw::c_uchar;
pub type SQLPOINTER = *mut ::std::os::raw::c_void;
pub type SQLREAL = ::std::os::raw::c_float;
pub type SQLSMALLINT = ::std::os::raw::c_short;
pub type SQLUSMALLINT = ::std::os::raw::c_ushort;
pub type SQLTIME = ::std::os::raw::c_uchar;
pub type SQLTIMESTAMP = ::std::os::raw::c_uchar;
pub type SQLVARCHAR = ::std::os::raw::c_uchar;
pub type SQLRETURN = SQLSMALLINT;
pub type SQLHANDLE = *mut ::std::os::raw::c_void;
pub type SQLHENV = SQLHANDLE;
pub type SQLHDBC = SQLHANDLE;
pub type SQLHSTMT = SQLHANDLE;
pub type SQLHDESC = SQLHANDLE;
pub type HENV = SQLHANDLE;
pub type HDBC = SQLHANDLE;
pub type HSTMT = SQLHANDLE;
pub type UCHAR = ::std::os::raw::c_uchar;
pub type SCHAR = ::std::os::raw::c_char;
pub type SQLSCHAR = SCHAR;
pub type SDWORD = ::std::os::raw::c_int;
pub type UDWORD = ::std::os::raw::c_uint;
pub type SWORD = ::std::os::raw::c_short;
pub type UWORD = ::std::os::raw::c_ushort;
pub type UINT = ::std::os::raw::c_uint;
pub type SLONG = ::std::os::raw::c_long;
pub type SSHORT = ::std::os::raw::c_short;
pub type ULONG = ::std::os::raw::c_ulong;
pub type USHORT = ::std::os::raw::c_ushort;
pub type SDOUBLE = ::std::os::raw::c_double;
pub type LDOUBLE = ::std::os::raw::c_double;
pub type SFLOAT = ::std::os::raw::c_float;
pub type PTR = *mut ::std::os::raw::c_void;
pub type RETCODE = ::std::os::raw::c_short;
pub type SQLHWND = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tagDATE_STRUCT {
    pub year: SQLSMALLINT,
    pub month: SQLUSMALLINT,
    pub day: SQLUSMALLINT,
}
impl ::std::clone::Clone for Struct_tagDATE_STRUCT {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tagDATE_STRUCT {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DATE_STRUCT = Struct_tagDATE_STRUCT;
pub type SQL_DATE_STRUCT = DATE_STRUCT;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tagTIME_STRUCT {
    pub hour: SQLUSMALLINT,
    pub minute: SQLUSMALLINT,
    pub second: SQLUSMALLINT,
}
impl ::std::clone::Clone for Struct_tagTIME_STRUCT {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tagTIME_STRUCT {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TIME_STRUCT = Struct_tagTIME_STRUCT;
pub type SQL_TIME_STRUCT = TIME_STRUCT;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tagTIMESTAMP_STRUCT {
    pub year: SQLSMALLINT,
    pub month: SQLUSMALLINT,
    pub day: SQLUSMALLINT,
    pub hour: SQLUSMALLINT,
    pub minute: SQLUSMALLINT,
    pub second: SQLUSMALLINT,
    pub fraction: SQLUINTEGER,
}
impl ::std::clone::Clone for Struct_tagTIMESTAMP_STRUCT {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tagTIMESTAMP_STRUCT {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TIMESTAMP_STRUCT = Struct_tagTIMESTAMP_STRUCT;
pub type SQL_TIMESTAMP_STRUCT = TIMESTAMP_STRUCT;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed1 {
    SQL_IS_YEAR = 1,
    SQL_IS_MONTH = 2,
    SQL_IS_DAY = 3,
    SQL_IS_HOUR = 4,
    SQL_IS_MINUTE = 5,
    SQL_IS_SECOND = 6,
    SQL_IS_YEAR_TO_MONTH = 7,
    SQL_IS_DAY_TO_HOUR = 8,
    SQL_IS_DAY_TO_MINUTE = 9,
    SQL_IS_DAY_TO_SECOND = 10,
    SQL_IS_HOUR_TO_MINUTE = 11,
    SQL_IS_HOUR_TO_SECOND = 12,
    SQL_IS_MINUTE_TO_SECOND = 13,
}
pub type SQLINTERVAL = Enum_Unnamed1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tagSQL_YEAR_MONTH {
    pub year: SQLUINTEGER,
    pub month: SQLUINTEGER,
}
impl ::std::clone::Clone for Struct_tagSQL_YEAR_MONTH {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tagSQL_YEAR_MONTH {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SQL_YEAR_MONTH_STRUCT = Struct_tagSQL_YEAR_MONTH;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tagSQL_DAY_SECOND {
    pub day: SQLUINTEGER,
    pub hour: SQLUINTEGER,
    pub minute: SQLUINTEGER,
    pub second: SQLUINTEGER,
    pub fraction: SQLUINTEGER,
}
impl ::std::clone::Clone for Struct_tagSQL_DAY_SECOND {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tagSQL_DAY_SECOND {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SQL_DAY_SECOND_STRUCT = Struct_tagSQL_DAY_SECOND;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tagSQL_INTERVAL_STRUCT {
    pub interval_type: SQLINTERVAL,
    pub interval_sign: SQLSMALLINT,
    pub intval: Union_Unnamed2,
}
impl ::std::clone::Clone for Struct_tagSQL_INTERVAL_STRUCT {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tagSQL_INTERVAL_STRUCT {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed2 {
    pub _bindgen_data_: [u32; 5usize],
}
impl Union_Unnamed2 {
    pub unsafe fn year_month(&mut self) -> *mut SQL_YEAR_MONTH_STRUCT {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn day_second(&mut self) -> *mut SQL_DAY_SECOND_STRUCT {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SQL_INTERVAL_STRUCT = Struct_tagSQL_INTERVAL_STRUCT;
pub type SQLBIGINT = ::std::os::raw::c_long;
pub type SQLUBIGINT = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tagSQL_NUMERIC_STRUCT {
    pub precision: SQLCHAR,
    pub scale: SQLSCHAR,
    pub sign: SQLCHAR,
    pub val: [SQLCHAR; 16usize],
}
impl ::std::clone::Clone for Struct_tagSQL_NUMERIC_STRUCT {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tagSQL_NUMERIC_STRUCT {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SQL_NUMERIC_STRUCT = Struct_tagSQL_NUMERIC_STRUCT;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tagSQLGUID {
    pub Data1: DWORD,
    pub Data2: WORD,
    pub Data3: WORD,
    pub Data4: [BYTE; 8usize],
}
impl ::std::clone::Clone for Struct_tagSQLGUID {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tagSQLGUID {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SQLGUID = Struct_tagSQLGUID;
pub type BOOKMARK = SQLULEN;
pub type SQLWCHAR = WCHAR;
pub type SQLTCHAR = SQLCHAR;
